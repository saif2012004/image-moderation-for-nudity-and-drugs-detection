name: 🐳 Docker Build & Publish

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}-api
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # 🏗️ Build and Test Docker Images
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build API Image (Test)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: test-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build Frontend Image (Test)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: test-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker Images
        run: |
          # Test API image
          docker run --rm -d --name test-api -p 7000:7000 test-api:latest
          sleep 10
          docker stop test-api || true

          # Test Frontend image  
          docker run --rm -d --name test-frontend -p 3000:3000 test-frontend:latest
          sleep 5
          docker stop test-frontend || true

  # 📦 Publish to GitHub Container Registry
  publish-ghcr:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Extract Metadata (API)
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 📋 Extract Metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🚀 Build and Push API Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 📦 Publish to Docker Hub (Optional)
  publish-dockerhub:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 🚀 Build and Push to Docker Hub (API)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/image-moderation-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/image-moderation-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🚀 Build and Push to Docker Hub (Frontend)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/image-moderation-frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/image-moderation-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🔍 Security Scanning
  security-scan:
    needs: publish-ghcr
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    permissions:
      security-events: write

    steps:
      - name: 🛡️ Run Trivy vulnerability scanner (API)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest
          format: "sarif"
          output: "api-trivy-results.sarif"

      - name: 🛡️ Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
          format: "sarif"
          output: "frontend-trivy-results.sarif"

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "api-trivy-results.sarif"

      - name: 📤 Upload Frontend scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "frontend-trivy-results.sarif"

  # 📊 Image Information
  image-info:
    needs: [publish-ghcr]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: 📋 Display Image Information
        run: |
          echo "🎉 Docker images published successfully!"
          echo ""
          echo "📦 API Image:"
          echo "  GitHub: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest"
          echo ""
          echo "📦 Frontend Image:"
          echo "  GitHub: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
          echo ""
          echo "🔗 Usage:"
          echo "  docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest"
          echo "  docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest"
